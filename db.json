{"Asset":[{"_id":"themes/hexo.ishgo/source/ico/apple-touch-icon-114-precomposed.png","path":"ico/apple-touch-icon-114-precomposed.png","modified":false},{"_id":"themes/hexo.ishgo/source/ico/apple-touch-icon-144-precomposed.png","path":"ico/apple-touch-icon-144-precomposed.png","modified":false},{"_id":"themes/hexo.ishgo/source/ico/apple-touch-icon-57-precomposed.png","path":"ico/apple-touch-icon-57-precomposed.png","modified":false},{"_id":"themes/hexo.ishgo/source/ico/apple-touch-icon-72-precomposed.png","path":"ico/apple-touch-icon-72-precomposed.png","modified":false},{"_id":"themes/hexo.ishgo/source/ico/favicon.png","path":"ico/favicon.png","modified":false},{"_id":"themes/hexo.ishgo/source/css/app.less","path":"css/app.less","modified":false},{"_id":"themes/hexo.ishgo/source/scripts/libs/pace.min.js","path":"scripts/libs/pace.min.js","modified":false},{"_id":"themes/hexo.ishgo/source/css/bootstrap.min.css","path":"css/bootstrap.min.css","modified":false},{"_id":"themes/hexo.ishgo/source/css/font-awesome.min.css","path":"css/font-awesome.min.css","modified":false},{"_id":"themes/hexo.ishgo/source/fonts/awesome/FontAwesome.otf","path":"fonts/awesome/FontAwesome.otf","modified":false},{"_id":"themes/hexo.ishgo/source/fonts/awesome/fontawesome-webfont.eot","path":"fonts/awesome/fontawesome-webfont.eot","modified":false},{"_id":"themes/hexo.ishgo/source/fonts/awesome/fontawesome-webfont.ttf","path":"fonts/awesome/fontawesome-webfont.ttf","modified":false},{"_id":"themes/hexo.ishgo/source/fonts/awesome/fontawesome-webfont.svg","path":"fonts/awesome/fontawesome-webfont.svg","modified":false},{"_id":"themes/hexo.ishgo/source/fonts/awesome/fontawesome-webfont.woff","path":"fonts/awesome/fontawesome-webfont.woff","modified":false},{"_id":"themes/hexo.ishgo/source/fonts/crimsontext/crimsontext-bolditalic.css","path":"fonts/crimsontext/crimsontext-bolditalic.css","modified":false},{"_id":"themes/hexo.ishgo/source/fonts/crimsontext/crimsontext-bolditalic.eot","path":"fonts/crimsontext/crimsontext-bolditalic.eot","modified":false},{"_id":"themes/hexo.ishgo/source/fonts/crimsontext/crimsontext-bolditalic.svg","path":"fonts/crimsontext/crimsontext-bolditalic.svg","modified":false},{"_id":"themes/hexo.ishgo/source/fonts/crimsontext/crimsontext-bolditalic.woff","path":"fonts/crimsontext/crimsontext-bolditalic.woff","modified":false},{"_id":"source/CNAME","path":"CNAME","modified":true}],"Cache":[{"_id":"source/_posts/addslashes,mysql_real_escape_string并不能防止SQL注入.md","mtime":1386998562000},{"_id":"source/_posts/ishgohexo团队博客主题.md","mtime":1386998562000},{"_id":"source/_posts/ishgo团队技术博客成立啦.md","mtime":1386998562000},{"_id":"source/_posts/说说怎么部署静态网站到github上.md","mtime":1386998562000},{"_id":"themes/hexo.ishgo/README.md","mtime":1408197496000},{"_id":"themes/hexo.ishgo/_config.yml","mtime":1408202305000},{"_id":"themes/hexo.ishgo/languages/default.yml","mtime":1408197502000},{"_id":"themes/hexo.ishgo/languages/zh-CN.yml","mtime":1408197502000},{"_id":"themes/hexo.ishgo/languages/zh-TW.yml","mtime":1408197041000},{"_id":"themes/hexo.ishgo/layout/archive.jade","mtime":1408201342000},{"_id":"themes/hexo.ishgo/layout/index.jade","mtime":1408201836000},{"_id":"themes/hexo.ishgo/layout/post.jade","mtime":1408201290000},{"_id":"themes/hexo.ishgo/layout/wide-post.jade","mtime":1408201827000},{"_id":"themes/hexo.ishgo/layout/_baidu/statistics.jade","mtime":1408197501000},{"_id":"themes/hexo.ishgo/layout/_duoshuo/cmmt_count.jade","mtime":1408197501000},{"_id":"themes/hexo.ishgo/layout/_duoshuo/comments.jade","mtime":1408197500000},{"_id":"themes/hexo.ishgo/layout/_duoshuo/dynamic.jade","mtime":1408197500000},{"_id":"themes/hexo.ishgo/layout/_duoshuo/import.jade","mtime":1408197499000},{"_id":"themes/hexo.ishgo/layout/_duoshuo/lively.jade","mtime":1408197499000},{"_id":"themes/hexo.ishgo/layout/_duoshuo/visitors.jade","mtime":1408197499000},{"_id":"themes/hexo.ishgo/layout/_jiathis/import.jade","mtime":1408197498000},{"_id":"themes/hexo.ishgo/layout/_jiathis/share.jade","mtime":1408197498000},{"_id":"themes/hexo.ishgo/layout/_mixins/archive.jade","mtime":1408197497000},{"_id":"themes/hexo.ishgo/layout/_mixins/article.jade","mtime":1408197514000},{"_id":"themes/hexo.ishgo/layout/_partial/footer.jade","mtime":1408200036000},{"_id":"themes/hexo.ishgo/layout/_partial/head.jade","mtime":1408197644000},{"_id":"themes/hexo.ishgo/layout/_partial/header.jade","mtime":1408201939000},{"_id":"themes/hexo.ishgo/layout/_partial/import.jade","mtime":1408197041000},{"_id":"themes/hexo.ishgo/layout/_partial/pagination.jade","mtime":1408197506000},{"_id":"themes/hexo.ishgo/layout/_post/article.jade","mtime":1408198991000},{"_id":"themes/hexo.ishgo/layout/_post/categories.jade","mtime":1408198956000},{"_id":"themes/hexo.ishgo/layout/_post/comments.jade","mtime":1408197505000},{"_id":"themes/hexo.ishgo/layout/_post/pagination.jade","mtime":1408197504000},{"_id":"themes/hexo.ishgo/layout/_post/share.jade","mtime":1408197504000},{"_id":"themes/hexo.ishgo/layout/_post/tags.jade","mtime":1408198963000},{"_id":"themes/hexo.ishgo/source/ico/apple-touch-icon-114-precomposed.png","mtime":1408197041000},{"_id":"themes/hexo.ishgo/source/ico/apple-touch-icon-144-precomposed.png","mtime":1408197041000},{"_id":"themes/hexo.ishgo/source/ico/apple-touch-icon-57-precomposed.png","mtime":1408197041000},{"_id":"themes/hexo.ishgo/source/ico/apple-touch-icon-72-precomposed.png","mtime":1408197041000},{"_id":"themes/hexo.ishgo/source/ico/favicon.png","mtime":1408197041000},{"_id":"themes/hexo.ishgo/source/css/_ishgo/app.less","mtime":1408201792000},{"_id":"themes/hexo.ishgo/source/css/_ishgo/components/buttons.less","mtime":1408200983000},{"_id":"themes/hexo.ishgo/source/css/_ishgo/effects/fonts.less","mtime":1408199192000},{"_id":"themes/hexo.ishgo/source/css/_ishgo/mixins/lesshat.less","mtime":1395776096000},{"_id":"themes/hexo.ishgo/source/scripts/libs/pace.min.js","mtime":1394697768000},{"_id":"themes/hexo.ishgo/source/css/app.less","mtime":1408197041000},{"_id":"themes/hexo.ishgo/source/css/bootstrap.min.css","mtime":1403799251000},{"_id":"themes/hexo.ishgo/source/css/font-awesome.min.css","mtime":1407130182000},{"_id":"themes/hexo.ishgo/layout/_partial/author.jade","mtime":1408202294000},{"_id":"themes/hexo.ishgo/layout/_partial/category.jade","mtime":1408197509000},{"_id":"themes/hexo.ishgo/layout/_partial/dynamic.jade","mtime":1408197509000},{"_id":"themes/hexo.ishgo/layout/_partial/lively.jade","mtime":1408197507000},{"_id":"themes/hexo.ishgo/layout/_partial/visitors.jade","mtime":1408197506000},{"_id":"themes/hexo.ishgo/source/fonts/awesome/FontAwesome.otf","mtime":1400052712000},{"_id":"themes/hexo.ishgo/source/fonts/awesome/fontawesome-webfont.eot","mtime":1400052712000},{"_id":"themes/hexo.ishgo/source/fonts/awesome/fontawesome-webfont.svg","mtime":1400052712000},{"_id":"themes/hexo.ishgo/source/fonts/awesome/fontawesome-webfont.ttf","mtime":1400052712000},{"_id":"themes/hexo.ishgo/source/fonts/awesome/fontawesome-webfont.woff","mtime":1400052712000},{"_id":"themes/hexo.ishgo/source/css/_ishgo/core/grid.less","mtime":1408201040000},{"_id":"themes/hexo.ishgo/source/css/_ishgo/mixins/bootstrap.less","mtime":1391013036000},{"_id":"themes/hexo.ishgo/source/css/_ishgo/mixins/msic.less","mtime":1407933549000},{"_id":"themes/hexo.ishgo/source/css/_ishgo/reset/print.less","mtime":1408200668000},{"_id":"themes/hexo.ishgo/source/css/_ishgo/variables/bootstrap.less","mtime":1400583637000},{"_id":"themes/hexo.ishgo/source/css/_ishgo/widgets/duoshuo.less","mtime":1408200277000},{"_id":"themes/hexo.ishgo/source/css/_ishgo/widgets/jiathis.less","mtime":1408197486000},{"_id":"themes/hexo.ishgo/source/css/_ishgo/widgets/prettify.less","mtime":1408197485000},{"_id":"themes/hexo.ishgo/source/css/_ishgo/pages/archive/main.less","mtime":1408201785000},{"_id":"themes/hexo.ishgo/source/css/_ishgo/pages/index/main.less","mtime":1408200781000},{"_id":"themes/hexo.ishgo/source/css/_ishgo/pages/post/main.less","mtime":1408200278000},{"_id":"themes/hexo.ishgo/source/fonts/crimsontext/crimsontext-bolditalic.css","mtime":1407980114000},{"_id":"themes/hexo.ishgo/source/fonts/crimsontext/crimsontext-bolditalic.eot","mtime":1407980114000},{"_id":"themes/hexo.ishgo/source/fonts/crimsontext/crimsontext-bolditalic.svg","mtime":1407980114000},{"_id":"themes/hexo.ishgo/source/fonts/crimsontext/crimsontext-bolditalic.woff","mtime":1407980114000},{"_id":"themes/hexo.ishgo/source/css/_ishgo/variables/type.less","mtime":1408200661000},{"_id":"themes/hexo.ishgo/source/css/_ishgo/partials/footer/main.less","mtime":1408200085000},{"_id":"themes/hexo.ishgo/source/css/_ishgo/partials/header/main.less","mtime":1408202061000},{"_id":"themes/hexo.ishgo/source/css/_ishgo/partials/pagination/main.less","mtime":1408199791000},{"_id":"themes/hexo.ishgo/source/css/_ishgo/partials/sidebar/main.less","mtime":1408200663000},{"_id":"source/CNAME","mtime":1408208092000}],"Category":[{"name":"其他","_id":"5os7wdzmrapg2v4j","posts":["gs4dxravy175oya1","2555wfwqgreinuha"]},{"name":"PHP","_id":"w9mmw63pcasve0pi","posts":["6moeyvaplr3347so"]},{"name":"前端","_id":"qy98nwhwb7l3axl7","posts":["w32e5myfgfu8vb4v"]}],"Page":[],"Post":[{"title":"说说怎么部署静态网站到github上","date":1379433669000,"author":"Barbery","categories":["5os7wdzmrapg2v4j"],"tags":["bap3im5dy5pjgomv","gw6hahbzpvpzhd8c","0481y8vf1bsxtb3x"],"content":"<ol>\n<li><p>首先, 第一步当然要先到github上建立一个repo. 什么? 你找不到哪里创建?看下图<br><img src=\"http://ww4.sinaimg.cn/large/6915c7dcgw1e8pwx8oth8j20ax05ct8q.jpg\" alt=\"看图\"></p>\n</li>\n<li><p>填写完必要的信息, 创建完成后, 需要设置一下, 才能让repo里面的html文件publish出去. 废话少说, 看图, 点击下面这个图标进入setting页面<br><a id=\"more\"></a><br><img src=\"http://ww1.sinaimg.cn/large/6915c7dcgw1e8px21o73lj20qc0cogn8.jpg\" alt=\"setting\"></p>\n</li>\n<li><p>进入设置页面后, 滚下去.. 找到下图这个位置, 点击红框按钮, 即可转为github page 模式..<br><img src=\"http://ww4.sinaimg.cn/large/6915c7dcgw1e8px3q3uj5j20jk04hgm6.jpg\" alt=\"github page\"></p>\n</li>\n<li><p>默认什么都不用填, 直接点continue进入下一步, 选择模板这里随便选就可以了, 点击下图这个图标, 正式生成github page<br><img src=\"http://ww1.sinaimg.cn/large/6915c7dcgw1e8px6mi02kj20ql05emxq.jpg\" alt=\"generate github page\">  </p>\n</li>\n</ol>\n<hr>\n<p>到这里, github page已经生成啦…<br><img src=\"http://ww1.sinaimg.cn/large/6915c7dcgw1e8px9oaqy6j20lp09lta1.jpg\" alt=\"finish\"></p>\n<p>你会发现, 里面有了html的静态文件, 和多了一个叫gh-pages的分支, 这些都是git默认生成的..  访问你 <code>username.gitpage.io/repoName/</code>(这里username为你的github用户名, repoName为repo名称,也就是project名) 看下</p>\n<p><code>关于以后部署的话, 这里要注意一下:</code><br>部署上来的静态资源一定要部署到<code>gh-pages</code>这个分支上, 你访问页面时访问的就是这个分支的内容.. git只允许访问这个分支的内容, 所以千万不要默认传到master分支上了.. 还有就是github pages 上会有静态资源缓存, 所以更新上去的静态文件, 可能需要等个5~10分钟才能更新..  </p>\n<p><code>最后说说绑定域名..</code><br>github pages 的绑定域名非常简单, 只要在gh-pages根目录下, 创建一个<code>CNAME</code>文件, 然后里面填入你想要绑定地址.. 还是看图直观点.. 下图是我们blog的CNAME文件<br><img src=\"http://ww4.sinaimg.cn/large/6915c7dcgw1e8pxm0rr6rj20ho06kmxl.jpg\" alt=\"\"></p>\n<p>然后别忘记还要设置域名的CNAME记录… 直接做个CNAME记录指向<code>username.github.io</code>就可以了, 例如本博客的cname记录<br><img src=\"http://ww4.sinaimg.cn/large/6915c7dcgw1e8pxpypkfnj20ek019t8k.jpg\" alt=\"\">  </p>\n<p>ok, 到这里, 大功告成, 打完收工…</p>\n","source":"_posts/说说怎么部署静态网站到github上.md","raw":"title: 说说怎么部署静态网站到github上\ndate: 2013-09-18 00:01:09\nauthor: Barbery  \ncategories: [其他]\ntags: [github pages,部署,HTML]\n---\n1. 首先, 第一步当然要先到github上建立一个repo. 什么? 你找不到哪里创建?看下图   \n![看图](http://ww4.sinaimg.cn/large/6915c7dcgw1e8pwx8oth8j20ax05ct8q.jpg)\n\n2. 填写完必要的信息, 创建完成后, 需要设置一下, 才能让repo里面的html文件publish出去. 废话少说, 看图, 点击下面这个图标进入setting页面  \n<!-- more -->\n![setting](http://ww1.sinaimg.cn/large/6915c7dcgw1e8px21o73lj20qc0cogn8.jpg)\n\n3. 进入设置页面后, 滚下去.. 找到下图这个位置, 点击红框按钮, 即可转为github page 模式.. \n![github page](http://ww4.sinaimg.cn/large/6915c7dcgw1e8px3q3uj5j20jk04hgm6.jpg)\n\n4. 默认什么都不用填, 直接点continue进入下一步, 选择模板这里随便选就可以了, 点击下图这个图标, 正式生成github page\n![generate github page](http://ww1.sinaimg.cn/large/6915c7dcgw1e8px6mi02kj20ql05emxq.jpg)  \n------  \n到这里, github page已经生成啦… \n![finish](http://ww1.sinaimg.cn/large/6915c7dcgw1e8px9oaqy6j20lp09lta1.jpg)\n\n你会发现, 里面有了html的静态文件, 和多了一个叫gh-pages的分支, 这些都是git默认生成的..  访问你 `username.gitpage.io/repoName/`(这里username为你的github用户名, repoName为repo名称,也就是project名) 看下\n\n\n`关于以后部署的话, 这里要注意一下:`   \n部署上来的静态资源一定要部署到`gh-pages`这个分支上, 你访问页面时访问的就是这个分支的内容.. git只允许访问这个分支的内容, 所以千万不要默认传到master分支上了.. 还有就是github pages 上会有静态资源缓存, 所以更新上去的静态文件, 可能需要等个5~10分钟才能更新..  \n\n`最后说说绑定域名..`  \ngithub pages 的绑定域名非常简单, 只要在gh-pages根目录下, 创建一个`CNAME`文件, 然后里面填入你想要绑定地址.. 还是看图直观点.. 下图是我们blog的CNAME文件  \n![](http://ww4.sinaimg.cn/large/6915c7dcgw1e8pxm0rr6rj20ho06kmxl.jpg)\n\n然后别忘记还要设置域名的CNAME记录… 直接做个CNAME记录指向`username.github.io`就可以了, 例如本博客的cname记录\n![](http://ww4.sinaimg.cn/large/6915c7dcgw1e8pxpypkfnj20ek019t8k.jpg)  \n\n\nok, 到这里, 大功告成, 打完收工...\n\n    ","slug":"说说怎么部署静态网站到github上","updated":1386998562000,"excerpt":"<ol>\n<li><p>首先, 第一步当然要先到github上建立一个repo. 什么? 你找不到哪里创建?看下图<br><img src=\"http://ww4.sinaimg.cn/large/6915c7dcgw1e8pwx8oth8j20ax05ct8q.jpg\" alt=\"看图\"></p>\n</li>\n<li><p>填写完必要的信息, 创建完成后, 需要设置一下, 才能让repo里面的html文件publish出去. 废话少说, 看图, 点击下面这个图标进入setting页面<br>","_id":"gs4dxravy175oya1","comments":true,"layout":"post","photos":[],"link":""},{"title":"addslashes, mysql_real_escape_string并不能防止SQL注入!!!","date":1378598189000,"author":"Barbery","categories":["w9mmw63pcasve0pi"],"tags":["rb77gr3sbfsqg1so","e8b8bv44k6zwzvso","2o3df620ei3q4dvg","083sq4rd6bjtk5ui","727r0voc64u1guto"],"content":"<p>先看代码…</p>\n<pre><code><span class=\"php\"><span class=\"preprocessor\">&lt;?php</span>\n    header(<span class=\"string\">'Content-Type: text/html; charset=GBK'</span>);\n    <span class=\"variable\">$input</span> = chr(<span class=\"number\">0xbf</span>) . chr(<span class=\"number\">0x27</span>) . <span class=\"string\">' OR username = username; /*'</span>;\n    <span class=\"variable\">$value</span> = addslashes(<span class=\"variable\">$input</span>);  \n    <span class=\"variable\">$sql</span> = <span class=\"string\">\"SELECT * FROM users WHERE username='{$value}' AND password='123123';\"</span>;\n\n    <span class=\"keyword\">echo</span> <span class=\"variable\">$value</span>;\n    <span class=\"keyword\">echo</span> <span class=\"variable\">$sql</span>;\n<span class=\"preprocessor\">?&gt;</span></span>\n</code></pre><p>以上的demo, 输出结果为:<br><img src=\"http://ww3.sinaimg.cn/large/6915c7dcgw1e8d0o3a0l1j20lu02uq3c.jpg\" alt=\"http://ww3.sinaimg.cn/large/6915c7dcgw1e8d0o3a0l1j20lu02uq3c.jpg\"></p>\n<p>看出问题了吗???</p>\n<p><a id=\"more\"></a><br>ok, 再来一个, 如果执行上图的sql,结果为: </p>\n<p><img src=\"http://t3.qpic.cn/mblogpic/1ec6802af45da8f8cdfa/460\" alt=\"http://t3.qpic.cn/mblogpic/1ec6802af45da8f8cdfa/460\"> </p>\n<p>看到木有… 瞬间就可以被爆表~~</p>\n<p>你也许会疑问, 为什么addslashes没有生效~~ 对于一个单引号 ‘ 来说, addslashes 是有效果的, 但是这里不是一个实体的单引号字符.. 我们再看回去$value的赋值</p>\n<pre><code><span class=\"variable\">$input</span> = <span class=\"keyword\">chr</span>(<span class=\"number\">0xbf</span>) . <span class=\"keyword\">chr</span>(<span class=\"number\">0x27</span>) . <span class=\"string\">' OR username = username; /*'</span>;\n</code></pre><p>chr(0xbf) 和 chr(0x27)相连接, 构成一个双字节字符(0xbf27)… 而0xbf27只是一个人为合成的双字节, 不在GBK编码表里, 也就是说不是一个合法的GBK双字节字符… 系统会把这个双字节拆分为2个单字节解析(也就是0xbf和0x27), 而addslashes并不知道它是非法的双字节字符, 单引号的GBK编码就是chr(0x27), 单独使用使addslashes是可以识别的…<br>我使用mysql_real_escape_string测试结果也一样, 无法识别这个非法的GBK双字节字符, 虽然无法识别, 但是使用mysql_query sql却没有绕过mysql的内部系统, 执行结果是空行数…上网搜了一下, 网友说在mysql 5.0的某个版本被修复鸟~~ 但是mysql的更新链接已经失效, 所以也无法追寻是哪个版本后修复了这个问题… 但是手动复制sql进去phpmyadmin下执行 是可以执行的~~ 知道的朋友, 可以交流下!!</p>\n<p>附上测试脚本: <a href=\"https://github.com/Barbery/blog/blob/master/sql_inject_test.php\" target=\"_blank\" rel=\"external\">https://github.com/Barbery/blog/blob/master/sql_inject_test.php</a><br>关于上面说的, 大家有什么不懂或需要详细了解, 推荐阅读:<br><a href=\"http://shiflett.org/blog/2006/jan/addslashes-versus-mysql-real-escape-string\" target=\"_blank\" rel=\"external\">http://shiflett.org/blog/2006/jan/addslashes-versus-mysql-real-escape-string</a><br><a href=\"http://ilia.ws/archives/103-mysql_real_escape_string-versus-Prepared-Statements.html\" target=\"_blank\" rel=\"external\">http://ilia.ws/archives/103-mysql_real_escape_string-versus-Prepared-Statements.html</a></p>\n<h3 id=\"解决办法:\">解决办法:</h3>\n<p>使用PDO进行SQL操作..</p>\n<blockquote>\n<p>Prepared statements are 2 round-trips to the database for a single query.</p>\n<p>As soon as you prepare a query, it’s sent to the database with the placeholders you set. So the database engine takes that prepared statement and maps out the query and optimizes it for execution. Then when you call execute() only the values you give are sent to the database, with a reference to that query you just prepared. The database engine drops in the values and runs the query. This is totally immune to SQL injection, because the database engine already knows exactly where the values begin and end (the placeholder marker(s) you set), and therefore never need escaping.</p>\n<p>The reason SQL injection exists in the first place is because the entire query is interpreted upon execution, values and all. So if anything interferes with the quotes surrounding your values, the engine thinks that value has ended earlier than it really should, and thus a security hole is introduced. That problem is avoided entirely with prepared statements by letting the database engine know ahead of time exactly where to put each value you pass to it later on. There is no need for escaping and there is no need to worry.</p>\n</blockquote>\n<p>简单点说就是, 通过PDO的prepared来预处理, PDO在执行1条SQL语句时会发送2条指令, 1是要执行的SQL指令, 但是没有进行赋值, MYSQL对将要处理的SQL进行优化, 然后PDO再发送1条指令, 这条指令就是上条指令需要用到的变量, MYSQL收到后进行赋值然后执行, 这样就可以消除SQL注入…</p>\n<p>再简单点说就是, 例如SQL为:</p>\n<pre><code><span class=\"operator\"><span class=\"keyword\">SELECT</span> * <span class=\"keyword\">FROM</span> <span class=\"keyword\">user</span> <span class=\"keyword\">WHERE</span> username=<span class=\"string\">'barbery'</span>;</span>\n</code></pre><p>只发送1条指令的情况下, mysql要从这条SQL中提取出barbery, 所以就会存在没转义, 等的注入攻击..</p>\n<p>而如果使用PDO的话, 第一条指令会是这样发送</p>\n<pre><code><span class=\"operator\"><span class=\"keyword\">SELECT</span> * <span class=\"keyword\">FROM</span> <span class=\"keyword\">user</span> <span class=\"keyword\">WHERE</span> username=?;</span>\n</code></pre><p>然后第二条指令再把变量值 barbery发送过去…MYSQL接受到第一条指令时就使用编译器进行优化(使用什么索引等等), 就把指令的执行内容和范围给确定了, 后面传过来的值是什么, 都不会影响SQL的执行内容…</p>\n<p>这里建议阅读 <a href=\"http://zhangxugg-163-com.iteye.com/blog/1835721\" target=\"_blank\" rel=\"external\">http://zhangxugg-163-com.iteye.com/blog/1835721</a> 获得更直观的了解~~</p>\n","source":"_posts/addslashes,mysql_real_escape_string并不能防止SQL注入.md","raw":"title: addslashes, mysql_real_escape_string并不能防止SQL注入!!!\ndate: 2013-09-08 07:56:29\nauthor: Barbery  \ncategories: [PHP]\ntags: [ADDSLASHES, MYSQL_REAL_ESCAPE_STRING, PDO, PHP, SQL注入]\n---\n\n先看代码...\n\n    <?php\n        header('Content-Type: text/html; charset=GBK');\n        $input = chr(0xbf) . chr(0x27) . ' OR username = username; /*';\n        $value = addslashes($input);  \n        $sql = \"SELECT * FROM users WHERE username='{$value}' AND password='123123';\";\n\n        echo $value;\n        echo $sql;\n    ?>\n\n以上的demo, 输出结果为:\n![http://ww3.sinaimg.cn/large/6915c7dcgw1e8d0o3a0l1j20lu02uq3c.jpg](http://ww3.sinaimg.cn/large/6915c7dcgw1e8d0o3a0l1j20lu02uq3c.jpg)\n\n看出问题了吗???\n\n<!-- more -->\nok, 再来一个, 如果执行上图的sql,结果为: \n\n![http://t3.qpic.cn/mblogpic/1ec6802af45da8f8cdfa/460](http://t3.qpic.cn/mblogpic/1ec6802af45da8f8cdfa/460) \n\n看到木有… 瞬间就可以被爆表~~\n \n你也许会疑问, 为什么addslashes没有生效~~ 对于一个单引号 ' 来说, addslashes 是有效果的, 但是这里不是一个实体的单引号字符.. 我们再看回去$value的赋值\n\n    $input = chr(0xbf) . chr(0x27) . ' OR username = username; /*';\n\n \nchr(0xbf) 和 chr(0x27)相连接, 构成一个双字节字符(0xbf27)… 而0xbf27只是一个人为合成的双字节, 不在GBK编码表里, 也就是说不是一个合法的GBK双字节字符… 系统会把这个双字节拆分为2个单字节解析(也就是0xbf和0x27), 而addslashes并不知道它是非法的双字节字符, 单引号的GBK编码就是chr(0x27), 单独使用使addslashes是可以识别的...\n我使用mysql_real_escape_string测试结果也一样, 无法识别这个非法的GBK双字节字符, 虽然无法识别, 但是使用mysql_query sql却没有绕过mysql的内部系统, 执行结果是空行数...上网搜了一下, 网友说在mysql 5.0的某个版本被修复鸟~~ 但是mysql的更新链接已经失效, 所以也无法追寻是哪个版本后修复了这个问题… 但是手动复制sql进去phpmyadmin下执行 是可以执行的~~ 知道的朋友, 可以交流下!!\n \n附上测试脚本: [https://github.com/Barbery/blog/blob/master/sql_inject_test.php](https://github.com/Barbery/blog/blob/master/sql_inject_test.php)\n关于上面说的, 大家有什么不懂或需要详细了解, 推荐阅读:\n[http://shiflett.org/blog/2006/jan/addslashes-versus-mysql-real-escape-string](http://shiflett.org/blog/2006/jan/addslashes-versus-mysql-real-escape-string)\n[http://ilia.ws/archives/103-mysql_real_escape_string-versus-Prepared-Statements.html](http://ilia.ws/archives/103-mysql_real_escape_string-versus-Prepared-Statements.html)\n\n\n###解决办法:\n\n使用PDO进行SQL操作..\n\n> Prepared statements are 2 round-trips to the database for a single query.\n\n> As soon as you prepare a query, it's sent to the database with the placeholders you set. So the database engine takes that prepared statement and maps out the query and optimizes it for execution. Then when you call execute() only the values you give are sent to the database, with a reference to that query you just prepared. The database engine drops in the values and runs the query. This is totally immune to SQL injection, because the database engine already knows exactly where the values begin and end (the placeholder marker(s) you set), and therefore never need escaping.\n\n> The reason SQL injection exists in the first place is because the entire query is interpreted upon execution, values and all. So if anything interferes with the quotes surrounding your values, the engine thinks that value has ended earlier than it really should, and thus a security hole is introduced. That problem is avoided entirely with prepared statements by letting the database engine know ahead of time exactly where to put each value you pass to it later on. There is no need for escaping and there is no need to worry.\n \n \n简单点说就是, 通过PDO的prepared来预处理, PDO在执行1条SQL语句时会发送2条指令, 1是要执行的SQL指令, 但是没有进行赋值, MYSQL对将要处理的SQL进行优化, 然后PDO再发送1条指令, 这条指令就是上条指令需要用到的变量, MYSQL收到后进行赋值然后执行, 这样就可以消除SQL注入...\n\n再简单点说就是, 例如SQL为:\n\n    SELECT * FROM user WHERE username='barbery';\n\n只发送1条指令的情况下, mysql要从这条SQL中提取出barbery, 所以就会存在没转义, 等的注入攻击..\n\n而如果使用PDO的话, 第一条指令会是这样发送\n\n    SELECT * FROM user WHERE username=?;\n\n然后第二条指令再把变量值 barbery发送过去...MYSQL接受到第一条指令时就使用编译器进行优化(使用什么索引等等), 就把指令的执行内容和范围给确定了, 后面传过来的值是什么, 都不会影响SQL的执行内容...\n\n这里建议阅读 [http://zhangxugg-163-com.iteye.com/blog/1835721](http://zhangxugg-163-com.iteye.com/blog/1835721) 获得更直观的了解~~","slug":"addslashes,mysql_real_escape_string并不能防止SQL注入","updated":1386998562000,"excerpt":"<p>先看代码…</p>\n<pre><code><span class=\"php\"><span class=\"preprocessor\">&lt;?php</span>\n    header(<span class=\"string\">'Content-Type: text/html; charset=GBK'</span>);\n    <span class=\"variable\">$input</span> = chr(<span class=\"number\">0xbf</span>) . chr(<span class=\"number\">0x27</span>) . <span class=\"string\">' OR username = username; /*'</span>;\n    <span class=\"variable\">$value</span> = addslashes(<span class=\"variable\">$input</span>);  \n    <span class=\"variable\">$sql</span> = <span class=\"string\">\"SELECT * FROM users WHERE username='{$value}' AND password='123123';\"</span>;\n\n    <span class=\"keyword\">echo</span> <span class=\"variable\">$value</span>;\n    <span class=\"keyword\">echo</span> <span class=\"variable\">$sql</span>;\n<span class=\"preprocessor\">?&gt;</span></span>\n</code></pre><p>以上的demo, 输出结果为:<br><img src=\"http://ww3.sinaimg.cn/large/6915c7dcgw1e8d0o3a0l1j20lu02uq3c.jpg\" alt=\"http://ww3.sinaimg.cn/large/6915c7dcgw1e8d0o3a0l1j20lu02uq3c.jpg\"></p>\n<p>看出问题了吗???</p>\n<p>","_id":"6moeyvaplr3347so","comments":true,"layout":"post","photos":[],"link":""},{"title":"用Hexo快速打造静态博客","date":1379217600000,"author":"David","categories":["qy98nwhwb7l3axl7"],"tags":["l6q3aq6i9yo6u1f0","7imtkrnsmlh6i2kx","mqzhjamauf2fevqg","rermrj1g6p71m60e","60s21qinrl8dutvj","5mq3umjjt58vnn7y"],"content":"<p><a href=\"http://zespia.tw/Hexo/\" target=\"_blank\" rel=\"external\">Hexo</a> 是一个基于 <code>Node.js</code> 的静态博客程序, 可以方便的生成静态网页托管在 <code>github</code> 和 <code>Heroku</code> 上。</p>\n<h3 id=\"为什么要用静态博客？\">为什么要用静态博客？</h3>\n<ul>\n<li>跨平台同步文件</li>\n<li>系统简单易懂, 毫不臃肿, 方便改版</li>\n<li>众多第三方应用, 容易做自定义功能扩展</li>\n<li>纯静态, 极低的服务器压力</li>\n<li>最重要使用 <code>Markdown</code> 标记语法, 迁移什么的都非常方便</li>\n<li>能够托管在 <code>Github</code> 上</li>\n</ul>\n<p>下面简单用本博客介绍一下 <code>Hexo</code> 的简单使用扩展等</p>\n<p>利用 <code>Hexo</code> 简单几步就能静态博客了</p>\n<a id=\"more\"></a>\n\n<h3 id=\"Hexo_轻松搭建\">Hexo 轻松搭建</h3>\n<ul>\n<li>安装 <a href=\"http://nodejs.org/\" target=\"_blank\" rel=\"external\">nodejs</a> 和 <a href=\"https://npmjs.org/\" target=\"_blank\" rel=\"external\">npm</a></li>\n<li>npm install Hexo -g</li>\n<li>Hexo init blog — 创建博客</li>\n<li>cd blog</li>\n<li>Hexo server — 本地 Server</li>\n<li>Hexo generate — 生成发布</li>\n<li>修改 <code>blog/_config.yml</code> 中的的参数 <code>url</code> 在2.0+某版本中不为空立刻报错请保证不为空</li>\n</ul>\n<p>具体细节请上 <a href=\"http://zespia.tw/Hexo/\" target=\"_blank\" rel=\"external\">http://zespia.tw/Hexo/</a></p>\n<h3 id=\"写作\">写作</h3>\n<p>在 <code>Hexo init blog</code> 生成的目录中, 将写好的 <code>md</code> 文件, 放入 <code>blog/source/_posts</code> 目录下即可<br>启动 <code>Hexo server</code> 可以边写边看效果, 注意备份好 <code>md</code> 文件方便以后更换系统主题迁移等操作。</p>\n<p>长度控制可以编写 <code>md</code> 时, 添加 <code>&lt;!-- more --&gt;</code> 标签进行分割</p>\n<p>官方默认属性, 通过编写 <code>title</code>, <code>date</code>, <code>author</code>, <code>categories</code>, <code>tags</code> 定义文章和从属分类等,<br>注意 <code>date</code> 必须填写, 否则在更换或迁移平台的时候, 生成的目录会发生变化,<br>因为根据生成当时的日期进行划分目录。(若没有更改 <code>_config.yml</code> 下的 <code>permalink</code> 属性情况下)</p>\n<pre><code><span class=\"attribute\">layout</span>: <span class=\"string\">post</span>\n<span class=\"attribute\">title</span>: <span class=\"string\">用Hexo快速打造静态博客</span>\n<span class=\"attribute\">date</span>: <span class=\"string\">2013-09-15 12:00:00</span>\n<span class=\"attribute\">categories</span>: <span class=\"string\">[前端]</span>\n<span class=\"attribute\">tags</span>: <span class=\"string\">[Hexo, 静态博客, 自定义, 博客, 前端, github]</span>\n</code></pre><h3 id=\"自定义主题\">自定义主题</h3>\n<p>在生成的 <code>blog/themes/</code> 目录下就是所有主题, 可以通过配置 <code>blog/_config.yml</code> 文件中的 <code>theme</code> 进行主题更换, 注意的是修改完配置文件都要重启一下 <code>server</code> 或者 <code>generate</code> 重新生成一下。</p>\n<p>若自行编写主题可能还是使用官方推荐的 <code>ejs</code> 可能会更好, 逻辑比较直观。</p>\n<p>如果想做团队博客要注意 <code>Hexo</code> 环境必须相同, 所以建议将整个 <code>blog</code> 项目共享同步, 否则容易在版本更新时容易出现冲突。</p>\n<h3 id=\"ishgo主题\">ishgo主题</h3>\n<p><code>github</code> 项目地址 <a href=\"https://github.com/DavidKk/Hexo.ishgo\" target=\"_blank\" rel=\"external\">https://github.com/DavidKk/Hexo.ishgo</a></p>\n<h3 id=\"Informations_-_介绍\">Informations - 介绍</h3>\n<p>此主题主要用于团队技术博客而非其他个人博客, 因为主要优化在 <code>Markdown</code> 的代码着色, 着色主要参考 <code>submit Text2</code> 的 <code>monokai colors scheme</code>。</p>\n<p>支持自适应, 采用 <code>bootstapr v3.0</code> , 已经兼容 <code>ie7+</code> 的手脚架, 主要考虑以后 <code>bootstap</code> 有比较好的扩展性和代码规范。</p>\n<p>与官方默认主题不同的是使用 <code>jade</code> 和 <code>less</code> 来打造前端, 而非 <code>ejs</code> 和 <code>styl</code>, 所以安装有点儿麻烦</p>\n<p>如果用于团队请将博客整个共享, 保证代码版本统一。否则在版本更新阶段容易造成代码冲突。</p>\n<p>本主题不支持 <code>ie6</code> 以下版本, 支持 <a href=\"http://www.ie6nomore.com/\" target=\"_blank\" rel=\"external\">ie6nomore</a> 行动。IE6观看会跳到拒绝访问页面。</p>\n<p>评论采用 <code>多说</code>, 侧栏的项目和评论数均由多说技术提供，已配置成本地与真实环境多说同步</p>\n<p>可以添加新的文章属性</p>\n<ul>\n<li><code>author</code> 作者, 根据 <code>ishgo/config.yml</code> 下的 <code>author</code> 进行查找, 如果显示相关信息。</li>\n<li><code>hidden</code> 隐藏用于关于我们之类的文章, 在归档或目录下不会显示, 文章确实存在, 可直接不写。</li>\n</ul>\n<p>实例:</p>\n<pre><code><span class=\"attribute\">author</span>: <span class=\"string\">David</span>\n<span class=\"attribute\">hidden</span>: <span class=\"string\">false</span>\n</code></pre><h3 id=\"Install_-_安装\">Install - 安装</h3>\n<p>打开 <code>Hexo/_config.yml</code> 文件,<br>修改 <code>url</code> 成自己的博客地址, 不能为空,<br>修改 <code>plugins</code> 改成 <code>Hexo-renderer-jade</code> 和 <code>Hexo-renderer-less</code>,<br>修改 <code>theme</code> 属性改成 <code>ishgo</code></p>\n<pre><code><span class=\"attribute\">url</span>: <span class=\"string\">http://blog.ishgo.cn </span>\n\n<span class=\"haml\">plugins:\n-<span class=\"ruby\"> <span class=\"constant\">Hexo</span>-renderer-jade\n</span>-<span class=\"ruby\"> <span class=\"constant\">Hexo</span>-renderer-less\n</span>\ntheme: ishgo</span>\n</code></pre><p>修改 <code>Hexo/package.json</code> 的 <code>dependencies</code> 添加 <code>Hexo-renderer-less</code> 和 <code>Hexo-renderer-jade</code> 两项</p>\n<pre><code>{\n    \"<span class=\"attribute\">dependencies</span>\": <span class=\"value\">{\n        \"<span class=\"attribute\">Hexo-renderer-less</span>\": <span class=\"value\"><span class=\"string\">\"*\"</span></span>,\n        \"<span class=\"attribute\">Hexo-renderer-jade</span>\": <span class=\"value\"><span class=\"string\">\"*\"</span>\n    </span>}\n</span>}\n</code></pre><p>其中 <code>Hexo-renderer-less</code> 插件, 貌似没有添加压缩选项, 里面的 <code>options</code> 不知道那里设置, 官方文档又神马都没写, 可以将 <code>node_modules/Hexo-renderer-less/index.js</code> 改写 <code>callback</code> 一行改成 <code>callback(null, tree.toCSS({compress: true}));</code>, 这样生成的 <code>css</code> 就会压缩了, 而 <code>jade</code> 默认压缩, 如果没有, 服务器基本上都做了 <code>gzip</code> 压缩, 这个可以忽视。</p>\n<pre><code><span class=\"keyword\">var</span> less = require(<span class=\"string\">'less'</span>),\npath = require(<span class=\"string\">'path'</span>);\n\nhexo.extend.renderer.register(<span class=\"string\">'less'</span>, <span class=\"string\">'css'</span>, <span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">(data, options, callback)</span> </span>{\n    <span class=\"keyword\">var</span> parser = <span class=\"keyword\">new</span>(less.Parser)({\n        paths: path.dirname(data.path),\n        filename: path.basename(data.path)\n    });\n\n    parser.parse(data.text, <span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">(err, tree)</span> </span>{\n        <span class=\"keyword\">if</span> (err) <span class=\"keyword\">return</span> <span class=\"keyword\">callback</span>(err);\n        <span class=\"keyword\">callback</span>(<span class=\"literal\">null</span>, tree.toCSS({compress: <span class=\"literal\">true</span>}));\n    });\n});\n</code></pre><p>安装 <code>jade</code> 和 <code>less</code></p>\n<pre><code><span class=\"built_in\">cd</span> Hexo/\nnpm install\n</code></pre><h3 id=\"Config_-_配置\">Config - 配置</h3>\n<p>通过修改 <code>theme/ishgo/_config.yml</code> 可以自定义博客<br>详细选项说明 <a href=\"https://github.com/DavidKk/Hexo.ishgo/blob/master/_config.yml\" target=\"_blank\" rel=\"external\">https://github.com/DavidKk/Hexo.ishgo/blob/master/_config.yml</a></p>\n<ul>\n<li>site 网站相关设定</li>\n<li>menu 导航菜单</li>\n<li>sidebar 侧栏</li>\n<li>links 友情链接</li>\n<li>author 作者</li>\n<li>其他选项</li>\n</ul>\n<h3 id=\"技术支持\">技术支持</h3>\n<p>最后感谢一些开源项目提供技术支持或服务托管等</p>\n<ul>\n<li><a href=\"http://zespia.tw/Hexo/\" target=\"_blank\" rel=\"external\">Hexo</a></li>\n<li><a href=\"http://getbootstrap.com/\" target=\"_blank\" rel=\"external\">Bootstrap</a></li>\n<li><a href=\"http://fortawesome.github.io/Font-Awesome/\" target=\"_blank\" rel=\"external\">Font-Awesome</a></li>\n<li><a href=\"http://nodejs.org/\" target=\"_blank\" rel=\"external\">Nodejs</a></li>\n<li><a href=\"github.com\">Github</a></li>\n<li><a href=\"http://jquery.com/\" target=\"_blank\" rel=\"external\">jQuery</a></li>\n<li><a href=\"http://www.duoshuo.com/\" target=\"_blank\" rel=\"external\">多说</a></li>\n<li><a href=\"http://www.jiathis.com/\" target=\"_blank\" rel=\"external\">jiathis</a></li>\n</ul>\n","source":"_posts/ishgohexo团队博客主题.md","raw":"title: 用Hexo快速打造静态博客\ndate: 2013-09-15 12:00:00\nauthor: David\ncategories: [前端]\ntags: [Hexo, 静态博客, 自定义, 博客, 前端, github]\n---\n\n[Hexo](http://zespia.tw/Hexo/) 是一个基于 `Node.js` 的静态博客程序, 可以方便的生成静态网页托管在 `github` 和 `Heroku` 上。\n\n### 为什么要用静态博客？\n- 跨平台同步文件\n- 系统简单易懂, 毫不臃肿, 方便改版\n- 众多第三方应用, 容易做自定义功能扩展\n- 纯静态, 极低的服务器压力\n- 最重要使用 `Markdown` 标记语法, 迁移什么的都非常方便\n- 能够托管在 `Github` 上\n\n下面简单用本博客介绍一下 `Hexo` 的简单使用扩展等\n\n利用 `Hexo` 简单几步就能静态博客了\n\n<!-- more -->\n\n### Hexo 轻松搭建\n- 安装 [nodejs](http://nodejs.org/) 和 [npm](https://npmjs.org/)\n- npm install Hexo -g\n- Hexo init blog -- 创建博客\n- cd blog\n- Hexo server -- 本地 Server\n- Hexo generate -- 生成发布\n- 修改 `blog/_config.yml` 中的的参数 `url` 在2.0+某版本中不为空立刻报错请保证不为空\n\n具体细节请上 [http://zespia.tw/Hexo/](http://zespia.tw/Hexo/)\n\n\n### 写作\n在 `Hexo init blog` 生成的目录中, 将写好的 `md` 文件, 放入 `blog/source/_posts` 目录下即可\n启动 `Hexo server` 可以边写边看效果, 注意备份好 `md` 文件方便以后更换系统主题迁移等操作。\n\n长度控制可以编写 `md` 时, 添加 `<!-- more -->` 标签进行分割\n\n官方默认属性, 通过编写 `title`, `date`, `author`, `categories`, `tags` 定义文章和从属分类等,\n注意 `date` 必须填写, 否则在更换或迁移平台的时候, 生成的目录会发生变化,\n因为根据生成当时的日期进行划分目录。(若没有更改 `_config.yml` 下的 `permalink` 属性情况下)\n\t\n\tlayout: post\n\ttitle: 用Hexo快速打造静态博客\n\tdate: 2013-09-15 12:00:00\n\tcategories: [前端]\n\ttags: [Hexo, 静态博客, 自定义, 博客, 前端, github]\n\n\n### 自定义主题\n在生成的 `blog/themes/` 目录下就是所有主题, 可以通过配置 `blog/_config.yml` 文件中的 `theme` 进行主题更换, 注意的是修改完配置文件都要重启一下 `server` 或者 `generate` 重新生成一下。\n\n若自行编写主题可能还是使用官方推荐的 `ejs` 可能会更好, 逻辑比较直观。\n\n如果想做团队博客要注意 `Hexo` 环境必须相同, 所以建议将整个 `blog` 项目共享同步, 否则容易在版本更新时容易出现冲突。\n\n\n### ishgo主题\n`github` 项目地址 [https://github.com/DavidKk/Hexo.ishgo](https://github.com/DavidKk/Hexo.ishgo)\n\n\n### Informations - 介绍\n此主题主要用于团队技术博客而非其他个人博客, 因为主要优化在 `Markdown` 的代码着色, 着色主要参考 `submit Text2` 的 `monokai colors scheme`。\n\n支持自适应, 采用 `bootstapr v3.0` , 已经兼容 `ie7+` 的手脚架, 主要考虑以后 `bootstap` 有比较好的扩展性和代码规范。\n\n与官方默认主题不同的是使用 `jade` 和 `less` 来打造前端, 而非 `ejs` 和 `styl`, 所以安装有点儿麻烦\n\n如果用于团队请将博客整个共享, 保证代码版本统一。否则在版本更新阶段容易造成代码冲突。\n\n本主题不支持 `ie6` 以下版本, 支持 [ie6nomore](http://www.ie6nomore.com/) 行动。IE6观看会跳到拒绝访问页面。\n\n评论采用 `多说`, 侧栏的项目和评论数均由多说技术提供，已配置成本地与真实环境多说同步\n\n可以添加新的文章属性\n\n- `author` 作者, 根据 `ishgo/config.yml` 下的 `author` 进行查找, 如果显示相关信息。\n- `hidden` 隐藏用于关于我们之类的文章, 在归档或目录下不会显示, 文章确实存在, 可直接不写。\n\n实例:\n\n\tauthor: David\n\thidden: false\n\n\n### Install - 安装\n\n打开 `Hexo/_config.yml` 文件,\n修改 `url` 成自己的博客地址, 不能为空,\n修改 `plugins` 改成 `Hexo-renderer-jade` 和 `Hexo-renderer-less`,\n修改 `theme` 属性改成 `ishgo`\n\n\turl: http://blog.ishgo.cn \n\t\n\tplugins:\n\t- Hexo-renderer-jade\n\t- Hexo-renderer-less\n\t\n\ttheme: ishgo\n\t\n修改 `Hexo/package.json` 的 `dependencies` 添加 `Hexo-renderer-less` 和 `Hexo-renderer-jade` 两项\n\n\t{\n\t\t\"dependencies\": {\n\t\t\t\"Hexo-renderer-less\": \"*\",\n\t\t\t\"Hexo-renderer-jade\": \"*\"\n\t\t}\n\t}\n\n其中 `Hexo-renderer-less` 插件, 貌似没有添加压缩选项, 里面的 `options` 不知道那里设置, 官方文档又神马都没写, 可以将 `node_modules/Hexo-renderer-less/index.js` 改写 `callback` 一行改成 `callback(null, tree.toCSS({compress: true}));`, 这样生成的 `css` 就会压缩了, 而 `jade` 默认压缩, 如果没有, 服务器基本上都做了 `gzip` 压缩, 这个可以忽视。\n\n\tvar less = require('less'),\n\tpath = require('path');\n\n\thexo.extend.renderer.register('less', 'css', function(data, options, callback) {\n\t\tvar parser = new(less.Parser)({\n\t\t\tpaths: path.dirname(data.path),\n\t\t\tfilename: path.basename(data.path)\n\t\t});\n\n\t\tparser.parse(data.text, function(err, tree) {\n\t\t\tif (err) return callback(err);\n\t\t\tcallback(null, tree.toCSS({compress: true}));\n\t\t});\n\t});\n\n\n安装 `jade` 和 `less`\n\n\tcd Hexo/\n\tnpm install\n\n\n### Config - 配置\n通过修改 `theme/ishgo/_config.yml` 可以自定义博客\n详细选项说明 [https://github.com/DavidKk/Hexo.ishgo/blob/master/_config.yml](https://github.com/DavidKk/Hexo.ishgo/blob/master/_config.yml)\n\n- site 网站相关设定\n- menu 导航菜单\n- sidebar 侧栏\n- links 友情链接\n- author 作者\n- 其他选项\n\n\n### 技术支持\n最后感谢一些开源项目提供技术支持或服务托管等\n\n- [Hexo](http://zespia.tw/Hexo/)\n- [Bootstrap](http://getbootstrap.com/)\n- [Font-Awesome](http://fortawesome.github.io/Font-Awesome/)\n- [Nodejs](http://nodejs.org/)\n- [Github](github.com)\n- [jQuery](http://jquery.com/)\n- [多说](http://www.duoshuo.com/)\n- [jiathis](http://www.jiathis.com/)","slug":"ishgohexo团队博客主题","updated":1386998562000,"excerpt":"<p><a href=\"http://zespia.tw/Hexo/\" target=\"_blank\" rel=\"external\">Hexo</a> 是一个基于 <code>Node.js</code> 的静态博客程序, 可以方便的生成静态网页托管在 <code>github</code> 和 <code>Heroku</code> 上。</p>\n<h3 id=\"为什么要用静态博客？\">为什么要用静态博客？</h3>\n<ul>\n<li>跨平台同步文件</li>\n<li>系统简单易懂, 毫不臃肿, 方便改版</li>\n<li>众多第三方应用, 容易做自定义功能扩展</li>\n<li>纯静态, 极低的服务器压力</li>\n<li>最重要使用 <code>Markdown</code> 标记语法, 迁移什么的都非常方便</li>\n<li>能够托管在 <code>Github</code> 上</li>\n</ul>\n<p>下面简单用本博客介绍一下 <code>Hexo</code> 的简单使用扩展等</p>\n<p>利用 <code>Hexo</code> 简单几步就能静态博客了</p>\n","_id":"w32e5myfgfu8vb4v","comments":true,"layout":"post","photos":[],"link":""},{"title":"ishgo团队技术博客成立啦!!!!","date":1378511789000,"author":"Barbery","categories":["5os7wdzmrapg2v4j"],"tags":["rermrj1g6p71m60e","hjp3pnxlhqd1j8ds"],"content":"<p>多得<code>David</code>同学的日夜奋斗, 利用1个周末的时间把博客的代码给搭建出来…<br><br><br>成立这个博客的目的, 主要是响应互联网开源精神, 取之开源, 用之开源~, 把我们在开发我们的主项目 - <strong><a href=\"http://ishgo.cn\" target=\"_blank\" rel=\"external\">ISHGO</a></strong> 时遇到的技术问题写成博文公开, 让更多的人受益互联网的开源…<br><br><br>嘻嘻,这里小预告一下, 下一版本的<strong>ISHGO</strong>打算把基础的框架部分开源出来,<br><strong>ISHGO</strong>的项目就是搭建于这个开源框架之上, 让社区和<strong>ISHGO</strong>团队一起来维护这个框架, 想到这里, 内心不由的小激动的一下, 哈哈哈~~<br><br><br>good luck for us! 希望这次能够达到我们的逾期 !!!!</p>\n","source":"_posts/ishgo团队技术博客成立啦.md","raw":"title: ishgo团队技术博客成立啦!!!!\ndate: 2013-09-07 07:56:29\nauthor: Barbery  \ncategories: [其他]\ntags: [博客,ishgo团队]\n---\n\n多得`David`同学的日夜奋斗, 利用1个周末的时间把博客的代码给搭建出来…  \n<br>\n成立这个博客的目的, 主要是响应互联网开源精神, 取之开源, 用之开源~, 把我们在开发我们的主项目 - **[ISHGO](http://ishgo.cn)** 时遇到的技术问题写成博文公开, 让更多的人受益互联网的开源…  \n<br>\n嘻嘻,这里小预告一下, 下一版本的**ISHGO**打算把基础的框架部分开源出来, \n**ISHGO**的项目就是搭建于这个开源框架之上, 让社区和**ISHGO**团队一起来维护这个框架, 想到这里, 内心不由的小激动的一下, 哈哈哈~~  \n<br>\ngood luck for us! 希望这次能够达到我们的逾期 !!!!\n","slug":"ishgo团队技术博客成立啦","updated":1386998562000,"excerpt":"","_id":"2555wfwqgreinuha","comments":true,"layout":"post","photos":[],"link":""}],"Tag":[{"name":"github pages","_id":"bap3im5dy5pjgomv","posts":["gs4dxravy175oya1"]},{"name":"部署","_id":"gw6hahbzpvpzhd8c","posts":["gs4dxravy175oya1"]},{"name":"HTML","_id":"0481y8vf1bsxtb3x","posts":["gs4dxravy175oya1"]},{"name":"ADDSLASHES","_id":"rb77gr3sbfsqg1so","posts":["6moeyvaplr3347so"]},{"name":"MYSQL_REAL_ESCAPE_STRING","_id":"e8b8bv44k6zwzvso","posts":["6moeyvaplr3347so"]},{"name":"PDO","_id":"2o3df620ei3q4dvg","posts":["6moeyvaplr3347so"]},{"name":"PHP","_id":"083sq4rd6bjtk5ui","posts":["6moeyvaplr3347so"]},{"name":"SQL注入","_id":"727r0voc64u1guto","posts":["6moeyvaplr3347so"]},{"name":"Hexo","_id":"l6q3aq6i9yo6u1f0","posts":["w32e5myfgfu8vb4v"]},{"name":"静态博客","_id":"7imtkrnsmlh6i2kx","posts":["w32e5myfgfu8vb4v"]},{"name":"自定义","_id":"mqzhjamauf2fevqg","posts":["w32e5myfgfu8vb4v"]},{"name":"博客","_id":"rermrj1g6p71m60e","posts":["w32e5myfgfu8vb4v","2555wfwqgreinuha"]},{"name":"前端","_id":"60s21qinrl8dutvj","posts":["w32e5myfgfu8vb4v"]},{"name":"github","_id":"5mq3umjjt58vnn7y","posts":["w32e5myfgfu8vb4v"]},{"name":"ishgo团队","_id":"hjp3pnxlhqd1j8ds","posts":["2555wfwqgreinuha"]}]}